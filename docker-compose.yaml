
services:

  account-service:
    build:
      context: .
      dockerfile: ./account-service/Dockerfile
    environment:
      ACCOUNT_SERVER_PORT: ${ACCOUNT_SERVER_PORT}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_DATASOURCE_ACCOUNT_SCHEMA: ${SPRING_DATASOURCE_ACCOUNT_SCHEMA}
    ports:
      - "${ACCOUNT_SERVER_PORT}:${ACCOUNT_SERVER_PORT}"
      - "${ACCOUNT_SERVER_DEBUG_PORT}:${ACCOUNT_SERVER_DEBUG_PORT}"
    networks:
      - zbank-network

  adminer:
    image: adminer
    restart: always
    depends_on:
      services-db:
        condition: service_healthy
    ports:
      - 8090:8080
    networks:
      - zbank-network

  audit-service:
    build:
      context: .
      dockerfile: ./audit-service/Dockerfile
    environment:
      AUDIT_SERVER_PORT: ${AUDIT_SERVER_PORT}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_DATASOURCE_AUDIT_SCHEMA: ${SPRING_DATASOURCE_AUDIT_SCHEMA}
    ports:
      - "${AUDIT_SERVER_PORT}:${AUDIT_SERVER_PORT}"
      - "${AUDIT_SERVER_DEBUG_PORT}:${AUDIT_SERVER_DEBUG_PORT}"
    networks:
      - zbank-network



  consul:
    image: hashicorp/consul
    container_name: consul
    command: /bin/sh -c '
      consul agent -server -bootstrap-expect=1 -node=consul-server -client=0.0.0.0 -ui -data-dir=/consul/data &
      echo "Waiting for Consul to be available...";
      until curl -s http://localhost:8500/v1/status/leader | grep . > /dev/null; do
      sleep 2;
      done;
      echo "Consul is ready. Importing KV...";
      consul kv import @/consul/data/export.json;
      echo "KV import done.";
      wait
      '
    ports:
      - "${CONSUL_PORT}:${CONSUL_PORT}"           # Web UI и HTTP API
      - "8600:8600/udp"       # DNS (необязательно)
    volumes:
      - ./consul_data:/consul/data
    networks:
      - zbank-network

  cash-service:
    build:
      context: .
      dockerfile: ./cash-service/Dockerfile
    environment:
      CASH_SERVER_PORT: ${CASH_SERVER_PORT}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_DATASOURCE_CASH_SCHEMA: ${SPRING_DATASOURCE_CASH_SCHEMA}
    ports:
      - "${CASH_SERVER_PORT}:${CASH_SERVER_PORT}"
      - "${CASH_SERVER_DEBUG_PORT}:${CASH_SERVER_DEBUG_PORT}"
    networks:
      - zbank-network

  dictionaries-service:
    build:
      context: .
      dockerfile: ./dictionaries-service/Dockerfile
    environment:
      DICTIONARIES_SERVER_PORT: ${DICTIONARIES_SERVER_PORT}
    ports:
      - "${DICTIONARIES_SERVER_PORT}:${DICTIONARIES_SERVER_PORT}"
      - "${DICTIONARIES_SERVER_DEBUG_PORT}:${DICTIONARIES_SERVER_DEBUG_PORT}"
    networks:
      - zbank-network

  exchange-service:
    build:
      context: .
      dockerfile: ./exchange-service/Dockerfile
    environment:
      EXCHANGE_SERVER_PORT: ${EXCHANGE_SERVER_PORT}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_DATASOURCE_EXCHANGE_SCHEMA: ${SPRING_DATASOURCE_EXCHANGE_SCHEMA}
    ports:
      - "${EXCHANGE_SERVER_PORT}:${EXCHANGE_SERVER_PORT}"
      - "${EXCHANGE_SERVER_DEBUG_PORT}:${EXCHANGE_SERVER_DEBUG_PORT}"
    networks:
      - zbank-network

  front-ui:
    build:
      context: .
      dockerfile: ./front-ui/Dockerfile
    depends_on:
      keycloak:
        condition: service_healthy
    ports:
      - "${FRONT_UI_PORT}:${FRONT_UI_PORT}"
      - "${FRONT_UI_DEBUG_PORT}:${FRONT_UI_DEBUG_PORT}"
    networks:
      - zbank-network

  gateway-service:
    build:
      context: .
      dockerfile: ./gateway-service/Dockerfile
    environment:
      GATEWAY_SERVICE_PORT: ${GATEWAY_SERVICE_PORT}
    ports:
      - "${GATEWAY_SERVICE_PORT}:${GATEWAY_SERVICE_PORT}"
      - "${GATEWAY_SERVICE_DEBUG_PORT}:${GATEWAY_SERVICE_DEBUG_PORT}"
    networks:
      - zbank-network


  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak
    command: start-dev --http-port=7080 --import-realm --override=true  --features=preview,scripts --verbose
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      #      KC_HOSTNAME: keycloak
      #      KC_HTTP_PORT: 8080
      #      KC_HOSTNAME_STRICT: false
      KC_HEALTH_ENABLED: ${KC_HEALTH_ENABLED}
      KC_LOG_LEVEL: ${KC_LOG_LEVEL}
      KC_DB: postgres
      KC_DB_URL_HOST: ${KC_DB_URL_HOST}
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB_NAME}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/7080; echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost:7080\r\nConnection: close\r\n\r\n' >&3; cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1" ]
      interval: 30s
      timeout: 15s
      retries: 6
    depends_on:
      - keycloak-postgres
    ports:
      - "${KEYCLOAK_EXTERNAL_PORT}:${KEYCLOAK_INTERNAL_PORT}"
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    networks:
      zbank-network:
        aliases:
          - mynet

  keycloak-postgres:
    image: postgres:17
    environment:
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
    ports:
      - '${KEYCLOAK_DB_EXTERNAL_PORT}:${KEYCLOAK_DB_INTERNAL_PORT}'
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    networks:
      - zbank-network

  notification-service:
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    environment:
      NOTIFICATION_SERVER_PORT: ${NOTIFICATION_SERVER_PORT}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_DATASOURCE_NOTIFICATION_SCHEMA: ${SPRING_DATASOURCE_NOTIFICATION_SCHEMA}
    ports:
      - "${NOTIFICATION_SERVER_PORT}:${NOTIFICATION_SERVER_PORT}"
      - "${NOTIFICATION_SERVER_DEBUG_PORT}:${NOTIFICATION_SERVER_DEBUG_PORT}"
    networks:
      - zbank-network

  services-db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_DB: ${SERVICES_DB_NAME}
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "${SERVICES_DB_EXTERNAL_PORT}:${SERVICES_DB_INTERNAL_PORT}"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${SPRING_DATASOURCE_USERNAME}", "-d", "${SERVICES_DB_NAME}" ]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - zbank-network

  transfer-service:
    build:
      context: .
      dockerfile: ./transfer-service/Dockerfile
    environment:
      TRANSFER_SERVER_PORT: ${TRANSFER_SERVER_PORT}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_DATASOURCE_TRANSFER_SCHEMA: ${SPRING_DATASOURCE_TRANSFER_SCHEMA}
    ports:
      - "${TRANSFER_SERVER_PORT}:${TRANSFER_SERVER_PORT}"
      - "${TRANSFER_SERVER_DEBUG_PORT}:${TRANSFER_SERVER_DEBUG_PORT}"
    networks:
      - zbank-network

volumes:
  keycloak_postgres_data:
  postgres_data:
  consul_data:

networks:
  zbank-network:
    driver: bridge
