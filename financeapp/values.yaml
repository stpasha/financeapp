
# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

keycloak:
  enabled: true
  postgresql:
    enabled: false
  externalDatabase:
    host: financeapp-postgresql.test.svc.cluster.local
    user: zbank
    database: common_database
    existingSecret: keycloak-credentials
    existingSecretPasswordKey: KEYCLOAK_DB_PASSWORD
  auth:
    adminUser: gatekeeper
    adminPassword: swordfish
  production: false
  httpRelativePath: "/"
  hostname: keycloak.local
  service:
    type: ClusterIP
    ports:
      http: 80
  tls:
    enabled: false
  extraVolumes:
    - name: realm-config
      configMap:
        name: keycloak-realm-config
  extraVolumeMounts:
    - name: realm-config
      mountPath: /opt/bitnami/keycloak/data/import
  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: --import-realm

postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    username: zbank
    password: password
    database: common_database

  primary:
    persistence:
      enabled: true
      mountPath: /bitnami/postgresql
      size: 1Gi
    initdb:
      scriptsConfigMap: initdb-scripts

kafka:
  enabled: true
  controller:
    replicaCount: 1
  broker:
    replicaCount: 2
  kraft:
    enabled: true
    mode: combined

  configurationOverrides:
    controller.quorum.voters: "0@financeapp-kafka-0.financeapp-kafka-headless.test.svc.cluster.local:9093,1@financeapp-kafka-1.financeapp-kafka-headless.test.svc.cluster.local:9093"
    num.partitions: "10"
    default.replication.factor: "2"
    min.insync.replicas: "1" #поставить 2 если prod нужна надёжность в ущерб отказа работы

  listeners:
    client:
      protocol: PLAINTEXT
      port: 9094
    controller:
      protocol: PLAINTEXT
      port: 9093
    interbroker:
      protocol: PLAINTEXT
      port: 9092

  auth:
    enabled: false

  extraEnvVars:
    - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
      value: "true"

  provisioning:
    enabled: true
    topics:
      - name: input-notification
        partitions: 10
        replicationFactor: 2
        config:
          min.insync.replicas: "1"
      - name: input-exchange
        partitions: 1
        replicationFactor: 2
        config:
          min.insync.replicas: "1"
      - name: user-notification
        partitions: 10
        replicationFactor: 2
        config:
          min.insync.replicas: "1"

ingress:
  enabled: true
  ingressClassName: nginx

audit-service:
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    name: financeapp-audit-service
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]
  service:
    type: ClusterIP
    port: 8087
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_AUDIT_SCHEMA: "rule_info"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    AUDIT_SERVER_PORT: 8087
    AUDIT_SERVER_DEBUG_PORT: 5012
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"

account-service:
  replicaCount: 1
  image:
    repository: account-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }
  securityContext: { }
  service:
    type: ClusterIP
    port: 8081
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5

  volumes: [ ]

  volumeMounts: [ ]

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_DATASOURCE_ACCOUNT_SCHEMA: account_info
    SPRING_PROFILES_ACTIVE: "dev"
    keycloak_server_url: "http://{{ .Release.Name }}-keycloak.{{ .Release.Namespace }}.svc.cluster.local:80"
    KEYCLOAK_SERVER_REALM: zbank
    KEYCLOAK_SERVER_USERNAME: gatekeeper
    KEYCLOAK_SERVER_PASSWORD: swordfish
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"
    EXCEPTIONS_MAKE_ACCFAILURE: "Не удалось создать счёт"
    EXCEPTIONS_SEARCH_ACCFAILURE: "Счёт не найден"
    EXCEPTIONS_MAKE_USERFAILURE: "Пользователь не создан"
    EXCEPTIONS_SEARCH_USERFAILURE: "Пользователь не найден по имени"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    EXCEPTIONS_PASS_EDIT_FAILURE: "Password is not updated"
    ACCOUNT_SERVER_PORT: 8081
    ACCOUNT_SERVER_DEBUG_PORT: 5006
    SCHEDULER_ENABLED: "true"

cash-service:
  replicaCount: 1
  image:
    repository: cash-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    name: financeapp-cash-service
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]
  podAnnotations: { }
  podLabels: { }
  podSecurityContext: { }
  securityContext: { }
  service:
    type: ClusterIP
    port: 8084
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }
  secrets: { }
  autoscaling:
    enabled: false
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_CASH_SCHEMA: cash_info
    CASH_SERVER_PORT: 8084
    CASH_SERVER_DEBUG_PORT: 5009
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    keycloak_server_url: "http://{{ .Release.Name }}-keycloak.{{ .Release.Namespace }}.svc.cluster.local:80"
    KAFKA_URL: "financeapp-kafka:9092"

dictionaries-service:
  replicaCount: 1
  image:
    repository: dictionaries-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8083

  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"

  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5

  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  autoscaling:
    enabled: false

  affinity: { }

  envFrom: { }
  env: { }
  secrets: { }

  config:
    SPRING_PROFILES_ACTIVE: "dev"
    DICTIONARIES_SERVER_PORT: 8083
    DICTIONARIES_SERVER_DEBUG_PORT: 5008
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"

exchange-service:
  replicaCount: 1
  image:
    repository: exchange-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    name: financeapp-exchange-service
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8085

  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    INSUFFICENT_FUNDS_FAILURE: "Insufficient funds"
    CURRENCY_NOT_FOUND_FAILURE: "Currency info not found"
    ACC_NOT_FOUND_FAILURE: "Password is not updated"
    EXCHANGE_SERVER_PORT: 8085
    EXCHANGE_SERVER_DEBUG_PORT: 5010
    SPRING_DATASOURCE_EXCHANGE_SCHEMA: exchange_info
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"

front-ui:
  replicaCount: 1
  image:
    repository: front-ui
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    name: financeapp-front-ui
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8080

  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 120
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 120
    periodSeconds: 5

  volumes: [ ]

  volumeMounts: [ ]


  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    SPRING_PROFILES_ACTIVE: "dev"
    keycloak_server_url: "http://{{ .Release.Name }}-keycloak.{{ .Release.Namespace }}.svc.cluster.local:80"
    KEYCLOAK_SERVER_REALM: zbank
    KEYCLOAK_SERVER_USERNAME: gatekeeper
    KEYCLOAK_SERVER_PASSWORD: swordfish
    EXCEPTIONS_MAKE_ACCFAILURE: "Не удалось создать счёт"
    EXCEPTIONS_SEARCH_ACCFAILURE: "Счёт не найден"
    EXCEPTIONS_MAKE_USERFAILURE: "Пользователь не создан"
    EXCEPTIONS_SEARCH_USERFAILURE: "Пользователь не найден по имени"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    EXCEPTIONS_PASS_EDIT_FAILURE: "Password is not updated"
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"
    SCHEDULER_ENABLED: "true"

notification-service:
  replicaCount: 1
  image:
    repository: notification-service

    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    name: financeapp-notification-service
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]

  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8088
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]

  nodeSelector: { }

  autoscaling:
    enabled: false

  tolerations: [ ]

  affinity: { }

  envFrom: { }
  env: { }
  secrets: { }

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    NOTIFICATION_SERVER_PORT: 8088
    NOTIFICATION_SERVER_DEBUG_PORT: 5013
    SPRING_DATASOURCE_NOTIFICATION_SCHEMA: notification_info
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"

transfer-service:
  replicaCount: 1
  image:
    repository: transfer-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"

  # This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    name: financeapp-transfer-service
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8086
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  affinity: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_TRANSFER_SCHEMA: transfer_info
    INSUFFICENT_FUNDS_FAILURE: "Insufficient funds"
    CURRENCY_NOT_FOUND_FAILURE: "Currency info not found"
    ACC_NOT_FOUND_FAILURE: "Password is not updated"
    INCORRECT_SOURCE_ACCOUNT_FAILURE: "Unable to get currency or account info"
    TRANSFER_SERVER_PORT: 8086
    TRANSFER_SERVER_DEBUG_PORT: 5011
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"