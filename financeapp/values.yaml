# Default values for financeapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi


# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

keycloak:
  enabled: true
  postgresql:
    auth:
      username: zbank
      password: password
      database: common_database
  auth:
    adminUser: gatekeeper
    adminPassword: swordfish

  production: false

  httpRelativePath: "/"
  hostname: keycloak.local

  service:
    type: ClusterIP
    ports:
      http: 8080

  tls:
    enabled: false

  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: --import-realm
  extraVolumes:
    - name: realm-config
      configMap:
        name: keycloak-realm-config
  extraVolumeMounts:
    - name: realm-config
      mountPath: /opt/bitnami/keycloak/data/import

  # Конфигурация подключения к PostgreSQL
#  externalDatabase:
#    enabled: false

postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    username: zbank
    password: password
    database: common_database

  primary:
    persistence:
      enabled: true
      mountPath: /bitnami/postgresql
      size: 1Gi

    pgHbaConfiguration: |
      local   all             all                                     trust
      host    replication     all                   127.0.0.1/32     md5
      host    replication     all                   ::1/128          md5
      host    all             all                   0.0.0.0/0        md5
      host    all             all                   ::/0             md5

    initdb:
      scriptsConfigMap: initdb-scripts

ingress:
  enabled: true
  ingressClassName: nginx

audit-service:
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  service:
    type: ClusterIP
    port: 8087
  resources: { }
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_AUDIT_SCHEMA: "rule_info"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    AUDIT_SERVER_PORT: 8087
    AUDIT_SERVER_DEBUG_PORT: 5012

account-service:
  replicaCount: 1
  image:
    repository: account-service
    pullPolicy: IfNotPresent
    tag: "0.2.7.4"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8081
  resources: { }
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5

  volumes: [ ]

  volumeMounts: [ ]

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_DATASOURCE_ACCOUNT_SCHEMA: account_info
    SPRING_PROFILES_ACTIVE: "dev"
    KEYCLOAK_SERVER_URL: http://keycloak.local/
    KEYCLOAK_SERVER_REALM: zbank
    KEYCLOAK_SERVER_USERNAME: gatekeeper
    KEYCLOAK_SERVER_PASSWORD: swordfish

    EXCEPTIONS_MAKE_ACCFAILURE: "Не удалось создать счёт"
    EXCEPTIONS_SEARCH_ACCFAILURE: "Счёт не найден"
    EXCEPTIONS_MAKE_USERFAILURE: "Пользователь не создан"
    EXCEPTIONS_SEARCH_USERFAILURE: "Пользователь не найден по имени"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    EXCEPTIONS_PASS_EDIT_FAILURE: "Password is not updated"
    ACCOUNT_SERVER_PORT: 8081
    ACCOUNT_SERVER_DEBUG_PORT: 5006
    SCHEDULER_ENABLED: "true"

cash-service:
  replicaCount: 1
  image:
    repository: cash-service
    pullPolicy: IfNotPresent
    tag: "0.2.7.4"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }
  podSecurityContext: { }
  securityContext: { }
  service:
    type: ClusterIP
    port: 8084
  resources: { }
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }
  secrets: { }
  autoscaling:
    enabled: false
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_CASH_SCHEMA: cash_info
    CASH_SERVER_PORT: 8084
    CASH_SERVER_DEBUG_PORT: 5009

dictionaries-service:
  replicaCount: 1
  image:
    repository: dictionaries-service
    pullPolicy: IfNotPresent
    tag: "0.2.7.4"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8083

  resources: { }

  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5

  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  autoscaling:
    enabled: false

  affinity: { }

  envFrom: { }
  env: { }
  secrets: { }

  config:
    SPRING_PROFILES_ACTIVE: "dev"
    DICTIONARIES_SERVER_PORT: 8083
    DICTIONARIES_SERVER_DEBUG_PORT: 5008

exchange-service:
  replicaCount: 1
  image:
    repository: exchange-service
    pullPolicy: IfNotPresent
    tag: "0.2.7.4"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8085

  resources: { }
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    INSUFFICENT_FUNDS_FAILURE: "Insufficient funds"
    CURRENCY_NOT_FOUND_FAILURE: "Currency info not found"
    ACC_NOT_FOUND_FAILURE: "Password is not updated"
    EXCHANGE_SERVER_PORT: 8085
    EXCHANGE_SERVER_DEBUG_PORT: 5010
    SPRING_DATASOURCE_EXCHANGE_SCHEMA: exchange_info

front-ui:
  replicaCount: 1
  image:
    repository: front-ui
    pullPolicy: IfNotPresent
    tag: "0.2.7.4"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8080

  resources: { }
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5

  volumes: [ ]

  volumeMounts: [ ]


  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    SPRING_PROFILES_ACTIVE: "dev"
    KEYCLOAK_SERVER_URL: http://keycloak.local/
    KEYCLOAK_SERVER_REALM: zbank
    KEYCLOAK_SERVER_USERNAME: gatekeeper
    KEYCLOAK_SERVER_PASSWORD: swordfish

    EXCEPTIONS_MAKE_ACCFAILURE: "Не удалось создать счёт"
    EXCEPTIONS_SEARCH_ACCFAILURE: "Счёт не найден"
    EXCEPTIONS_MAKE_USERFAILURE: "Пользователь не создан"
    EXCEPTIONS_SEARCH_USERFAILURE: "Пользователь не найден по имени"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    EXCEPTIONS_PASS_EDIT_FAILURE: "Password is not updated"

    SCHEDULER_ENABLED: "true"

notification-service:
  replicaCount: 1
  image:
    repository: notification-service

    pullPolicy: IfNotPresent
    tag: "0.2.7.4"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true

    automount: true
    annotations: { }
    name: ""

  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8088
  resources: { }
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]

  nodeSelector: { }

  autoscaling:
    enabled: false

  tolerations: [ ]

  affinity: { }

  envFrom: { }
  env: { }
  secrets: { }

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    NOTIFICATION_SERVER_PORT: 8088
    NOTIFICATION_SERVER_DEBUG_PORT: 5013
    SPRING_DATASOURCE_NOTIFICATION_SCHEMA: notification_info

transfer-service:
  replicaCount: 1
  image:
    repository: transfer-service
    pullPolicy: IfNotPresent
    tag: "0.2.7.4"

  # This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8086
  resources: { }
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  affinity: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_TRANSFER_SCHEMA: transfer_info
    INSUFFICENT_FUNDS_FAILURE: "Insufficient funds"
    CURRENCY_NOT_FOUND_FAILURE: "Currency info not found"
    ACC_NOT_FOUND_FAILURE: "Password is not updated"
    INCORRECT_SOURCE_ACCOUNT_FAILURE: "Unable to get currency or account info"
    TRANSFER_SERVER_PORT: 8086
    TRANSFER_SERVER_DEBUG_PORT: 5011