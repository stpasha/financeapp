
# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

keycloak:
  enabled: true
  postgresql:
    enabled: false
  externalDatabase:
    host: financeapp-postgresql.test.svc.cluster.local
    user: zbank
    database: common_database
    existingSecret: keycloak-credentials
    existingSecretPasswordKey: KEYCLOAK_DB_PASSWORD
  auth:
    adminUser: gatekeeper
    adminPassword: swordfish
  production: false
  httpRelativePath: "/"
  hostname: keycloak.local
  service:
    type: ClusterIP
    ports:
      http: 80
  tls:
    enabled: false
  extraVolumes:
    - name: realm-config
      configMap:
        name: keycloak-realm-config
  extraVolumeMounts:
    - name: realm-config
      mountPath: /opt/bitnami/keycloak/data/import
  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: --import-realm

postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    username: zbank
    password: password
    database: common_database

  primary:
    persistence:
      enabled: true
      mountPath: /bitnami/postgresql
      size: 1Gi
    initdb:
      scriptsConfigMap: initdb-scripts

kafka:
  enabled: true
  controller:
    replicaCount: 1
  broker:
    replicaCount: 2
  kraft:
    enabled: true
    mode: combined

  configurationOverrides:
    controller.quorum.voters: "0@financeapp-kafka-0.financeapp-kafka-headless.test.svc.cluster.local:9093,1@financeapp-kafka-1.financeapp-kafka-headless.test.svc.cluster.local:9093"
    num.partitions: "10"
    default.replication.factor: "2"
    min.insync.replicas: "1" #поставить 2 если prod нужна надёжность в ущерб отказа работы

  listeners:
    client:
      protocol: PLAINTEXT
      port: 9094
    controller:
      protocol: PLAINTEXT
      port: 9093
    interbroker:
      protocol: PLAINTEXT
      port: 9092

  auth:
    enabled: false

  extraEnvVars:
    - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
      value: "true"

  provisioning:
    enabled: true
    topics:
      - name: input-notification
        partitions: 10
        replicationFactor: 2
        config:
          min.insync.replicas: "1"
      - name: input-exchange
        partitions: 1
        replicationFactor: 2
        config:
          min.insync.replicas: "1"
      - name: user-notification
        partitions: 10
        replicationFactor: 2
        config:
          min.insync.replicas: "1"
      - name: log-kafka
        partitions: 1
        replicationFactor: 2
        config:
          min.insync.replicas: "1"

zipkin:
  enabled: true
  storageType: mem # указываем способ хранения в памяти
  self-tracing:
    # Параметр трассировки самого себя
    enabled: false
  cassandra:
    enabled: false # отключаем поднятие Cassandra (использовалась по умолчанию)




kube-prometheus:
  prometheus:
    additionalPrometheusRules:
      - name: custom-recording-rules
        groups:
          - name: first-group
            rules:
              - alert: HighFailedTransfers
                expr: sum(increase(financeapp_failed_transfers_total[5m])) > 10
                for: 1m
                labels:
                  severity: warning
                annotations:
                  summary: "High number of failed transfers"
                  description: "More than 10 failed transfers in 5 minutes"
              - alert: HighFailedAuditOperations
                expr: sum(increase(financeapp_failed_audit_total[5m])) > 5
                for: 1m
                labels:
                  severity: critical
                annotations:
                  summary: "Suspicious operations blocked frequently"
                  description: "More than 5 suspicious operations blocked in 5 minutes"
              - alert: HighFailedNotifications
                expr: sum(increase(financeapp_failed_notification_total[5m])) > 3
                for: 1m
                labels:
                  severity: warning
                annotations:
                  summary: "Notification sending failures"
                  description: "More than 3 notification sending failures in 5 minutes"
              - alert: CurrencyRatesNotUpdated
                expr: rate(financeapp_currency_duration_seconds_count[1m]) == 0
                for: 1m
                labels:
                  severity: critical
                annotations:
                  summary: "Currency rates are not being updated"
                  description: "No currency rate updates in the last 1m"
    additionalScrapeConfigs:
      enabled: true
      type: internal
      internal:
        jobList:
          - job_name: 'notification-service'
            metrics_path: '/actuator/prometheus'
            scrape_interval: 5s
            static_configs:
              - targets: [ '{{ .Release.Name }}-notification-service:8088' ]
                labels:
                  application: 'notification-service'

          - job_name: 'account-service'
            metrics_path: '/actuator/prometheus'
            scrape_interval: 5s
            static_configs:
              - targets: [ '{{ .Release.Name }}-account-service:8081' ]
                labels:
                  application: 'account-service'

          - job_name: 'audit-service'
            metrics_path: '/actuator/prometheus'
            scrape_interval: 5s
            static_configs:
              - targets: [ '{{ .Release.Name }}-audit-service:8087' ]
                labels:
                  application: 'audit-service'

          - job_name: 'dictionaries-service'
            metrics_path: '/actuator/prometheus'
            scrape_interval: 5s
            static_configs:
              - targets: [ '{{ .Release.Name }}-dictionaries-service:8083' ]
                labels:
                  application: 'dictionaries-service'

          - job_name: 'front-ui'
            metrics_path: '/actuator/prometheus'
            scrape_interval: 5s
            static_configs:
              - targets: [ '{{ .Release.Name }}-front-ui:8080' ]
                labels:
                  application: 'front-ui'
          - job_name: 'cash-service'
            metrics_path: '/actuator/prometheus'
            scrape_interval: 5s
            static_configs:
              - targets: [ '{{ .Release.Name }}-cash-service:8084' ]
                labels:
                  application: 'cash-service'
          - job_name: 'exchange-service'
            metrics_path: '/actuator/prometheus'
            scrape_interval: 5s
            static_configs:
              - targets: [ '{{ .Release.Name }}-exchange-service:8085' ]
                labels:
                  application: 'exchange-service'
          - job_name: 'transfer-service'
            metrics_path: '/actuator/prometheus'
            scrape_interval: 5s
            static_configs:
              - targets: [ '{{ .Release.Name }}-transfer-service:8086' ]
                labels:
                  application: 'transfer-service'
grafana:
  adminPassword: admin
  service:
    type: ClusterIP
  persistence:
    enabled: false
  sidecar:
    datasources:
      enabled: true
      label: grafana_datasource

logstash:
  image: "elastic/logstash"
  imageTag: "7.17.3"
  imagePullPolicy: IfNotPresent
  esJavaOpts: "-Xmx1g -Xms1g"
  logstashPipeline:
    monitoring.conf: |
      input {
        kafka {
          bootstrap_servers => "financeapp-kafka:9092"
          topics => ["log-kafka"]
          consumer_threads => 1
        }
      }
      
      filter {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log-level} \[%{DATA:microservice}\] \[traceId=%{DATA:traceId}, spanId=%{DATA:spanId}\] - %{GREEDYDATA:text}" }
        }
      }
      
      output {
        stdout { codec => rubydebug }
        elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            index => "financeapp-logs-%{+dd.MM.YYYY}"
            retry_on_conflict => 3
        }
      }
  enabled: true


elasticsearch:
  protocol: http
  createCert: false
  esJavaOpts: "-Xmx1g -Xms1g"
  clusterHealthCheckParams: ""
  tls:
    enabled: false
  masterService: "elasticsearch"
  imageTag: 8.5.1
  sysctlInitContainer:
    enabled: true

  replicas: 1
  rbac:
    create: false
  esConfig:
    elasticsearch.yml: |
      xpack.security.enabled: false
      xpack.security.http.ssl.enabled: false
      cluster.initial_master_nodes: ["elasticsearch-master-0"]
      xpack.security.authc:
        anonymous:
          username: anonymous_user 
          roles: superuser
          authz_exception: true


ingress:
  enabled: true
  ingressClassName: nginx

audit-service:
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    name: financeapp-audit-service
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]
  service:
    type: ClusterIP
    port: 8087
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_AUDIT_SCHEMA: "rule_info"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    AUDIT_SERVER_PORT: 8087
    AUDIT_SERVER_DEBUG_PORT: 5012
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"

account-service:
  replicaCount: 1
  image:
    repository: account-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }
  securityContext: { }
  service:
    type: ClusterIP
    port: 8081
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5

  volumes: [ ]

  volumeMounts: [ ]

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_DATASOURCE_ACCOUNT_SCHEMA: account_info
    SPRING_PROFILES_ACTIVE: "dev"
    keycloak_server_url: "http://{{ .Release.Name }}-keycloak.{{ .Release.Namespace }}.svc.cluster.local:80"
    KEYCLOAK_SERVER_REALM: zbank
    KEYCLOAK_SERVER_USERNAME: gatekeeper
    KEYCLOAK_SERVER_PASSWORD: swordfish
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"
    EXCEPTIONS_MAKE_ACCFAILURE: "Не удалось создать счёт"
    EXCEPTIONS_SEARCH_ACCFAILURE: "Счёт не найден"
    EXCEPTIONS_MAKE_USERFAILURE: "Пользователь не создан"
    EXCEPTIONS_SEARCH_USERFAILURE: "Пользователь не найден по имени"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    EXCEPTIONS_PASS_EDIT_FAILURE: "Password is not updated"
    ACCOUNT_SERVER_PORT: 8081
    ACCOUNT_SERVER_DEBUG_PORT: 5006
    SCHEDULER_ENABLED: "true"

cash-service:
  replicaCount: 1
  image:
    repository: cash-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    name: financeapp-cash-service
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]
  podAnnotations: { }
  podLabels: { }
  podSecurityContext: { }
  securityContext: { }
  service:
    type: ClusterIP
    port: 8084
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }
  secrets: { }
  autoscaling:
    enabled: false
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_CASH_SCHEMA: cash_info
    CASH_SERVER_PORT: 8084
    CASH_SERVER_DEBUG_PORT: 5009
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    keycloak_server_url: "http://{{ .Release.Name }}-keycloak.{{ .Release.Namespace }}.svc.cluster.local:80"
    KAFKA_URL: "financeapp-kafka:9092"

dictionaries-service:
  replicaCount: 1
  image:
    repository: dictionaries-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8083

  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"

  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5

  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  autoscaling:
    enabled: false

  affinity: { }

  envFrom: { }
  env: { }
  secrets: { }

  config:
    SPRING_PROFILES_ACTIVE: "dev"
    DICTIONARIES_SERVER_PORT: 8083
    DICTIONARIES_SERVER_DEBUG_PORT: 5008
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"

exchange-service:
  replicaCount: 1
  image:
    repository: exchange-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    name: financeapp-exchange-service
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8085

  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    INSUFFICENT_FUNDS_FAILURE: "Insufficient funds"
    CURRENCY_NOT_FOUND_FAILURE: "Currency info not found"
    ACC_NOT_FOUND_FAILURE: "Password is not updated"
    EXCHANGE_SERVER_PORT: 8085
    EXCHANGE_SERVER_DEBUG_PORT: 5010
    SPRING_DATASOURCE_EXCHANGE_SCHEMA: exchange_info
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"

front-ui:
  replicaCount: 1
  image:
    repository: front-ui
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    name: financeapp-front-ui
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8080

  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 120
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 120
    periodSeconds: 5

  volumes: [ ]

  volumeMounts: [ ]


  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    SPRING_PROFILES_ACTIVE: "dev"
    keycloak_server_url: "http://{{ .Release.Name }}-keycloak.{{ .Release.Namespace }}.svc.cluster.local:80"
    KEYCLOAK_SERVER_REALM: zbank
    KEYCLOAK_SERVER_USERNAME: gatekeeper
    KEYCLOAK_SERVER_PASSWORD: swordfish
    EXCEPTIONS_MAKE_ACCFAILURE: "Не удалось создать счёт"
    EXCEPTIONS_SEARCH_ACCFAILURE: "Счёт не найден"
    EXCEPTIONS_MAKE_USERFAILURE: "Пользователь не создан"
    EXCEPTIONS_SEARCH_USERFAILURE: "Пользователь не найден по имени"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    EXCEPTIONS_PASS_EDIT_FAILURE: "Password is not updated"
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"
    SCHEDULER_ENABLED: "true"

notification-service:
  replicaCount: 1
  image:
    repository: notification-service

    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    name: financeapp-notification-service
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]

  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8088
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]

  nodeSelector: { }

  autoscaling:
    enabled: false

  tolerations: [ ]

  affinity: { }

  envFrom: { }
  env: { }
  secrets: { }

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    NOTIFICATION_SERVER_PORT: 8088
    NOTIFICATION_SERVER_DEBUG_PORT: 5013
    SPRING_DATASOURCE_NOTIFICATION_SCHEMA: notification_info
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"

transfer-service:
  replicaCount: 1
  image:
    repository: transfer-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"

  # This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  #hostAliases:
#- ip: "192.168.65.9"
# hostnames:
#  - keycloak.local
  serviceAccount:
    create: true
    name: financeapp-transfer-service
    rbac:
      create: true
      clusterWide: false
      rules:
        - apiGroups: [ "" ]
          resources: [ "endpoints", "services", "pods" ]
          verbs: [ "get", "list", "watch" ]
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8086
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  affinity: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_TRANSFER_SCHEMA: transfer_info
    INSUFFICENT_FUNDS_FAILURE: "Insufficient funds"
    CURRENCY_NOT_FOUND_FAILURE: "Currency info not found"
    ACC_NOT_FOUND_FAILURE: "Password is not updated"
    INCORRECT_SOURCE_ACCOUNT_FAILURE: "Unable to get currency or account info"
    TRANSFER_SERVER_PORT: 8086
    TRANSFER_SERVER_DEBUG_PORT: 5011
    keycloak_issuer_uri: "http://keycloak.local/realms/zbank"
    KAFKA_URL: "financeapp-kafka:9092"