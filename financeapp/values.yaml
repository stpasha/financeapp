
# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

keycloak:
  enabled: true
  postgresql:
    enabled: false
  externalDatabase:
    host: financeapp-postgresql.dev.svc.cluster.local
    user: zbank
    database: common_database
    existingSecret: keycloak-credentials
    existingSecretPasswordKey: KEYCLOAK_DB_PASSWORD
  auth:
    adminUser: gatekeeper
  production: false
  httpRelativePath: "/"
  hostname: keycloak.local
  ingress:
    enabled: true
    hostname: keycloak.local
    path: /
    pathType: Prefix
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    tls: [ ]
  service:
    type: ClusterIP
    ports:
      http: 8080
  tls:
    enabled: false

  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: --import-realm
    - name: KEYCLOAK_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          name: keycloak-credentials
          key: KEYCLOAK_ADMIN_PASSWORD
  extraVolumes:
    - name: realm-config
      configMap:
        name: keycloak-realm-config
  extraVolumeMounts:
    - name: realm-config
      mountPath: /opt/bitnami/keycloak/data/import

postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    username: zbank
    password: password
    database: common_database

  primary:
    persistence:
      enabled: true
      mountPath: /bitnami/postgresql
      size: 1Gi
    initdb:
      scriptsConfigMap: initdb-scripts

ingress:
  enabled: true
  ingressClassName: nginx

audit-service:
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  service:
    type: ClusterIP
    port: 8087
  ingress:
    enabled: true
    className: nginx
    annotations: { }
    hosts:
      - host: finance.local
        paths:
          - path: /api/audit
            pathType: Prefix
    tls: [ ]
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_AUDIT_SCHEMA: "rule_info"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    AUDIT_SERVER_PORT: 8087
    AUDIT_SERVER_DEBUG_PORT: 5012
    KEYCLOAK_ISSUER_URI: http://keycloak.local/realms/zbank

account-service:
  replicaCount: 1
  image:
    repository: account-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }
  securityContext: { }
  service:
    type: ClusterIP
    port: 8081
  ingress:
    enabled: true
    className: nginx
    annotations: { }
    hosts:
      - host: finance.local
        paths:
          - path: /api/account
            pathType: Prefix
          - path: /api/user
            pathType: Prefix
    tls: [ ]
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5

  volumes: [ ]

  volumeMounts: [ ]

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_DATASOURCE_ACCOUNT_SCHEMA: account_info
    SPRING_PROFILES_ACTIVE: "dev"
    KEYCLOAK_SERVER_URL: http://keycloak.local/
    KEYCLOAK_SERVER_REALM: zbank
    KEYCLOAK_SERVER_USERNAME: gatekeeper
    KEYCLOAK_SERVER_PASSWORD: swordfish
    KEYCLOAK_ISSUER_URI: http://keycloak.local/realms/zbank

    EXCEPTIONS_MAKE_ACCFAILURE: "Не удалось создать счёт"
    EXCEPTIONS_SEARCH_ACCFAILURE: "Счёт не найден"
    EXCEPTIONS_MAKE_USERFAILURE: "Пользователь не создан"
    EXCEPTIONS_SEARCH_USERFAILURE: "Пользователь не найден по имени"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    EXCEPTIONS_PASS_EDIT_FAILURE: "Password is not updated"
    ACCOUNT_SERVER_PORT: 8081
    ACCOUNT_SERVER_DEBUG_PORT: 5006
    SCHEDULER_ENABLED: "true"

cash-service:
  replicaCount: 1
  image:
    repository: cash-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }
  podSecurityContext: { }
  securityContext: { }
  service:
    type: ClusterIP
    port: 8084
  ingress:
    enabled: true
    className: nginx
    annotations: { }
    hosts:
      - host: finance.local
        paths:
          - path: /api/cash
            pathType: Prefix
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }
  tolerations: [ ]
  affinity: { }
  secrets: { }
  autoscaling:
    enabled: false
  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_CASH_SCHEMA: cash_info
    CASH_SERVER_PORT: 8084
    CASH_SERVER_DEBUG_PORT: 5009
    KEYCLOAK_ISSUER_URI: http://keycloak.local/realms/zbank

dictionaries-service:
  replicaCount: 1
  image:
    repository: dictionaries-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8083
  ingress:
    enabled: true
    className: nginx
    annotations: { }
    hosts:
      - host: finance.local
        paths:
          - path: /api/dictionary
            pathType: Prefix
    tls: [ ]

  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"

  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5

  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  autoscaling:
    enabled: false

  affinity: { }

  envFrom: { }
  env: { }
  secrets: { }

  config:
    SPRING_PROFILES_ACTIVE: "dev"
    DICTIONARIES_SERVER_PORT: 8083
    DICTIONARIES_SERVER_DEBUG_PORT: 5008
    KEYCLOAK_ISSUER_URI: http://keycloak.local/realms/zbank

exchange-service:
  replicaCount: 1
  image:
    repository: exchange-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8085
  ingress:
    enabled: true
    className: nginx
    annotations: { }
    hosts:
      - host: finance.local
        paths:
          - path: /api/exchange
            pathType: Prefix
    tls: [ ]

  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    INSUFFICENT_FUNDS_FAILURE: "Insufficient funds"
    CURRENCY_NOT_FOUND_FAILURE: "Currency info not found"
    ACC_NOT_FOUND_FAILURE: "Password is not updated"
    EXCHANGE_SERVER_PORT: 8085
    EXCHANGE_SERVER_DEBUG_PORT: 5010
    SPRING_DATASOURCE_EXCHANGE_SCHEMA: exchange_info
    KEYCLOAK_ISSUER_URI: http://keycloak.local/realms/zbank

front-ui:
  replicaCount: 1
  image:
    repository: front-ui
    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8080
  ingress:
    enabled: true
    className: nginx
    annotations: { }
    hosts:
      - host: finance.local
        paths:
          - path: /
            pathType: Prefix
    tls: [ ]

  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5

  volumes: [ ]

  volumeMounts: [ ]


  nodeSelector: { }

  tolerations: [ ]

  affinity: { }
  secrets: { }

  autoscaling:
    enabled: false

  config:
    SPRING_PROFILES_ACTIVE: "dev"
    KEYCLOAK_SERVER_URL: http://keycloak.local/
    KEYCLOAK_SERVER_REALM: zbank
    KEYCLOAK_SERVER_USERNAME: gatekeeper
    KEYCLOAK_SERVER_PASSWORD: swordfish

    EXCEPTIONS_MAKE_ACCFAILURE: "Не удалось создать счёт"
    EXCEPTIONS_SEARCH_ACCFAILURE: "Счёт не найден"
    EXCEPTIONS_MAKE_USERFAILURE: "Пользователь не создан"
    EXCEPTIONS_SEARCH_USERFAILURE: "Пользователь не найден по имени"
    EXCEPTIONS_DESER_FAILURE: "Cannot deserialize payload"
    EXCEPTIONS_OPERATION_FAILURE: "Operation type not recognized"
    EXCEPTIONS_PASS_EDIT_FAILURE: "Password is not updated"
    KEYCLOAK_ISSUER_URI: http://keycloak.local/realms/zbank

    SCHEDULER_ENABLED: "true"

notification-service:
  replicaCount: 1
  image:
    repository: notification-service

    pullPolicy: IfNotPresent
    tag: "0.1.0"
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true

    automount: true
    annotations: { }
    name: ""

  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8088
  ingress:
    enabled: true
    className: nginx
    annotations: { }
    hosts:
      - host: finance.local
        paths:
          - path: /api/notification
            pathType: Prefix
    tls: [ ]
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]

  nodeSelector: { }

  autoscaling:
    enabled: false

  tolerations: [ ]

  affinity: { }

  envFrom: { }
  env: { }
  secrets: { }

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    NOTIFICATION_SERVER_PORT: 8088
    NOTIFICATION_SERVER_DEBUG_PORT: 5013
    SPRING_DATASOURCE_NOTIFICATION_SCHEMA: notification_info
    KEYCLOAK_ISSUER_URI: http://keycloak.local/realms/zbank

transfer-service:
  replicaCount: 1
  image:
    repository: transfer-service
    pullPolicy: IfNotPresent
    tag: "0.1.0"

  # This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    automount: true
    annotations: { }
    name: ""
  podAnnotations: { }
  podLabels: { }

  podSecurityContext: { }

  securityContext: { }
  service:
    type: ClusterIP
    port: 8086
  ingress:
    enabled: true
    className: nginx
    annotations: { }
    hosts:
      - host: finance.local
        paths:
          - path: /api/transfer
            pathType: Prefix
    tls: [ ]
  resources:
    limits:
      memory: "512Mi"
    requests:
      memory: "256Mi"
  livenessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/liveness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
  readinessProbe: # Example for Spring Boot Actuator
    httpGet:
      path: /actuator/health/readiness
      port: http
    initialDelaySeconds: 60
    periodSeconds: 5
  volumes: [ ]
  volumeMounts: [ ]
  nodeSelector: { }

  tolerations: [ ]

  affinity: { }

  autoscaling:
    enabled: false

  config:
    database_url: "jdbc:postgresql://{{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/common_database"
    database_username: "zbank"
    SPRING_PROFILES_ACTIVE: "dev"
    SPRING_DATASOURCE_TRANSFER_SCHEMA: transfer_info
    INSUFFICENT_FUNDS_FAILURE: "Insufficient funds"
    CURRENCY_NOT_FOUND_FAILURE: "Currency info not found"
    ACC_NOT_FOUND_FAILURE: "Password is not updated"
    INCORRECT_SOURCE_ACCOUNT_FAILURE: "Unable to get currency or account info"
    TRANSFER_SERVER_PORT: 8086
    TRANSFER_SERVER_DEBUG_PORT: 5011
    KEYCLOAK_ISSUER_URI: http://keycloak.local/realms/zbank