pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        DB_USER         = 'myuser'
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build & Unit Tests') {
            parallel {
                stage('Account Service') {
                    steps {
                        dir('account-service') {
                            sh 'gradle clean build'
                        }
                    }
                }
                stage('Audit Service') {
                    steps {
                        dir('audit-service') {
                            sh 'gradle clean build'
                        }
                    }
                }
                stage('Cash Service') {
                    steps {
                        dir('cash-service') {
                            sh 'gradle clean build'
                        }
                    }
                }
                stage('Dictionaries Service') {
                    steps {
                        dir('dictionaries-service') {
                            sh 'gradle clean build'
                        }
                    }
                }
                stage('Exchange Service') {
                    steps {
                        dir('exchange-service') {
                            sh 'gradle clean build'
                        }
                    }
                }
                stage('Front UI') {
                    steps {
                        dir('front-ui') {
                            sh 'gradle clean build'
                        }
                    }
                }
                stage('Notifications Service') {
                    steps {
                        dir('notification-service') {
                            sh 'gradle clean build'
                        }
                    }
                }
                stage('Transfer Service') {
                    steps {
                        dir('transfer-service') {
                            sh 'gradle clean build'
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t ${DOCKER_REGISTRY}/account-service:${IMAGE_TAG} ./account-service
                docker build -t ${DOCKER_REGISTRY}/audit-service:${IMAGE_TAG} ./audit-service
                docker build -t ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG} ./cash-service
                docker build -t ${DOCKER_REGISTRY}/dictionaries-service:${IMAGE_TAG} ./dictionaries-service
                docker build -t ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG} ./exchange-service
                docker build -t ${DOCKER_REGISTRY}/front-ui:${IMAGE_TAG} ./front-ui
                docker build -t ${DOCKER_REGISTRY}/notification-service:${IMAGE_TAG} ./notification-service
                docker build -t ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG} ./transfer-service
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                    sh """
                    echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
                    docker push ${DOCKER_REGISTRY}/account-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/audit-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/dictionaries-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/front-ui:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/notification-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('tgz process') {
            steps {
                dir('financeapp') {
                    sh """
                    echo "Dependency update started"
                    helm repo add bitnami https://raw.githubusercontent.com/bitnami/charts/refs/heads/archive-full-index/bitnami
                    helm dependency update
                    """
                }
            }
        }

        stage('Helm Deploy to TEST') {
            steps {
                sh """
                helm upgrade --install financeapp  ./financeapp -f ./financeapp/values.yaml\\
                  --namespace test --create-namespace \\
                  --set image.tag=${IMAGE_TAG}
                """
            }
        }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }


        stage('Helm Deploy to PROD') {
            steps {
                sh """
                helm upgrade --install financeapp  ./financeapp -f ./financeapp/values.yaml\\
                  --namespace prod --create-namespace \\
                  --set image.tag=${IMAGE_TAG}

                """
            }
        }
    }
}