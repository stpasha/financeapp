pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build & Unit Tests') {


                    steps {
                        dir('account-service') {
                            sh '../gradlew clean build'
                        }

                        dir('audit-service') {
                            sh '../gradlew clean build'
                        }

                        dir('cash-service') {
                            sh '../gradlew clean build'
                        }

                        dir('dictionaries-service') {
                            sh '../gradlew clean build'
                        }

                        dir('exchange-service') {
                            sh '../gradlew clean build'
                        }

                        dir('front-ui') {
                            sh '../gradlew clean build'
                        }

                        dir('notification-service') {
                            sh '../gradlew clean build'
                        }

                        dir('transfer-service') {
                            sh '../gradlew clean build'
                        }
                    }


        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t ${DOCKER_REGISTRY}/account-service:${IMAGE_TAG} ./account-service
                docker build -t ${DOCKER_REGISTRY}/audit-service:${IMAGE_TAG} ./audit-service
                docker build -t ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG} ./cash-service
                docker build -t ${DOCKER_REGISTRY}/dictionaries-service:${IMAGE_TAG} ./dictionaries-service
                docker build -t ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG} ./exchange-service
                docker build -t ${DOCKER_REGISTRY}/front-ui:${IMAGE_TAG} ./front-ui
                docker build -t ${DOCKER_REGISTRY}/notification-service:${IMAGE_TAG} ./notification-service
                docker build -t ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG} ./transfer-service
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                      retry(2) {
                        sh """
                        echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
                        docker push ${DOCKER_REGISTRY}/account-service:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/audit-service:${IMAGE_TAG}
                        """
                      }

                 }
                 withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                      retry(2) {
                        sh """
                        echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
                        docker push ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/dictionaries-service:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG}
                        """
                      }

                }
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                      retry(2) {
                        sh """
                        echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
                        docker push ${DOCKER_REGISTRY}/front-ui:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/notification-service:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG}
                        """
                      }
               }
            }
        }

        stage('tgz process') {
            steps {
                dir('financeapp') {
                    sh """
                    echo "Dependency update started"
                    helm repo add bitnami https://raw.githubusercontent.com/bitnami/charts/refs/heads/archive-full-index/bitnami
                    helm dependency update
                    """
                }
            }
        }

        stage('Helm Deploy to TEST') {
            steps {
                sh """
                helm upgrade --install financeapp ./financeapp -f ./financeapp/values.yaml \
                  --namespace test --create-namespace \
                  --set account-service.image.repository=${DOCKER_REGISTRY}/account-service \
                  --set account-service.image.tag=${IMAGE_TAG} \
                  --set audit-service.image.repository=${DOCKER_REGISTRY}/audit-service \
                  --set audit-service.image.tag=${IMAGE_TAG} \
                  --set cash-service.image.repository=${DOCKER_REGISTRY}/cash-service \
                  --set cash-service.image.tag=${IMAGE_TAG} \
                  --set dictionaries-service.image.repository=${DOCKER_REGISTRY}/dictionaries-service \
                  --set dictionaries-service.image.tag=${IMAGE_TAG} \
                  --set exchange-service.image.repository=${DOCKER_REGISTRY}/exchange-service \
                  --set exchange-service.image.tag=${IMAGE_TAG} \
                  --set front-ui.image.repository=${DOCKER_REGISTRY}/front-ui \
                  --set front-ui.image.tag=${IMAGE_TAG} \
                  --set notification-service.image.repository=${DOCKER_REGISTRY}/notification-service \
                  --set notification-service.image.tag=${IMAGE_TAG} \
                  --set transfer-service.image.repository=${DOCKER_REGISTRY}/transfer-service \
                  --set transfer-service.image.tag=${IMAGE_TAG} \
                  --set keycloak.externalDatabase.host=financeapp-postgresql.test.svc.cluster.local \
                  --set-string keycloak.extraEnvVars[1].name=KC_FRONTEND_URL \
                  --set-string keycloak.extraEnvVars[1].value=http://financeapp-keycloak.test.svc.cluster.local:8080
                """
            }
        }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }


        stage('Helm Deploy to PROD') {
            steps {
                sh """
                helm upgrade --install financeapp  ./financeapp -f ./financeapp/values.yaml\\
                  --namespace prod --create-namespace \\
                  --set account-service.image.repository=${DOCKER_REGISTRY}/account-service \
                  --set account-service.image.tag=${IMAGE_TAG} \
                  --set audit-service.image.repository=${DOCKER_REGISTRY}/audit-service \
                  --set audit-service.image.tag=${IMAGE_TAG} \
                  --set cash-service.image.repository=${DOCKER_REGISTRY}/cash-service \
                  --set cash-service.image.tag=${IMAGE_TAG} \
                  --set dictionaries-service.image.repository=${DOCKER_REGISTRY}/dictionaries-service \
                  --set dictionaries-service.image.tag=${IMAGE_TAG} \
                  --set exchange-service.image.repository=${DOCKER_REGISTRY}/exchange-service \
                  --set exchange-service.image.tag=${IMAGE_TAG} \
                  --set front-ui.image.repository=${DOCKER_REGISTRY}/front-ui \
                  --set front-ui.image.tag=${IMAGE_TAG} \
                  --set notification-service.image.repository=${DOCKER_REGISTRY}/notification-service \
                  --set notification-service.image.tag=${IMAGE_TAG} \
                  --set transfer-service.image.repository=${DOCKER_REGISTRY}/transfer-service \
                  --set transfer-service.image.tag=${IMAGE_TAG} \
                  --set keycloak.externalDatabase.host=financeapp-postgresql.prod.svc.cluster.local \
                  --set-string keycloak.extraEnvVars[1].name=KC_FRONTEND_URL \
                  --set-string keycloak.extraEnvVars[1].value=http://financeapp-keycloak.prod.svc.cluster.local:8080

                """
            }
        }
    }
}